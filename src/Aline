(* Alunos: Israel Deorce e Vinicius Kroth 
   Linguagem de Programação - 2017/2 *)

(* Função para ler arquivos, removendo os \n*)
fun readFile(filename) =
    let val file = TextIO.openIn filename
        val poem = TextIO.inputAll file
        val _ = TextIO.closeIn file
    in String.tokens (fn c => c = #"\n") poem
    end
  
(* Lendo o arquivo e concatenando *)
val texto = readFile("H37Rv.txt"); 
fun concat (list) = foldr op^ "" list; 
val texto = concat(texto);

(* Função para escrever em arquivos *)
fun writeFile (filename : string , text: string) =
    let val file = TextIO.openOut(filename)
        val _ = TextIO.output(file, text)
    in TextIO.closeOut(file)
    end
    
(* lista de aminoacidos *)
val aminoacidos = "G\nA\nV\nL\nI\nP\nS\nT\nC\nM\nD\nE\nF\nY\nW\nK\nR\nH\nN\nQ\n";

(* chamando o writeFuke para escrever os aminoacidos no arquivo *)
writeFile("aminoacidos.txt" ,aminoacidos);
	     
	  
(* achando base. Não ficou muito bom pois não conseguimos implementar uma estrutura eficiente LER EXPLICAÇÃO *)
fun amino(base: string)=  if String.equal(base, "GGG") orelse String.equal(base, "GGA") orelse String.equal(base, "GGC") orelse String.equal(base, "GGT") then "G" else if  String.equal(base, "GAG") orelse String.equal(base, "GAA") 
then "E" else if  String.equal(base, "GAC")  orelse String.equal(base, "GAT") then "D" else if String.equal(base, "GCG") orelse String.equal(base, "GCA") orelse String.equal(base, "GCC") orelse String.equal(base, "GCT")
orelse String.equal(base, "AAG") orelse String.equal(base, "AAA") then "A" else if String.equal(base, "CTG") orelse String.equal(base, "GTA") orelse String.equal(base, "GTC") orelse String.equal(base, "GTT") then "V" else if
String.equal(base, "AGG") orelse String.equal(base, "AGA") orelse String.equal(base, "CGG") orelse String.equal(base, "CGA") orelse String.equal(base, "CGC") orelse String.equal(base, "CGT") then "R" else if 
String.equal(base, "AGC") orelse String.equal(base, "AGT") orelse String.equal(base, "TCG") orelse String.equal(base, "TCA") orelse String.equal(base, "TCC") orelse String.equal(base, "TCT") then "S" else if
String.equal(base, "AAC") orelse String.equal(base, "AAT") then "N" else if String.equal(base, "ACG") orelse String.equal(base, "ACA") orelse String.equal(base, "ACC") orelse String.equal(base, "ACT") then "T" else if
String.equal(base, "ATG") then "M" else if String.equal(base, "ATA") orelse String.equal(base, "ATC") orelse String.equal(base, "ATT") then "I" else if String.equal(base, "CAG") orelse String.equal(base, "CAA") then "Q" else if
String.equal(base, "CAC") orelse String.equal(base, "CAT") then "H" else if String.equal(base, "CCG") orelse String.equal(base, "CCA") orelse String.equal(base, "CCC") orelse String.equal(base, "CCT") then "P" else if
String.equal(base, "CTG") orelse String.equal(base, "CTA") orelse String.equal(base, "CTC") orelse String.equal(base, "CTT") orelse String.equal(base, "TTG") orelse String.equal(base, "TTA") then "L" else if 
String.equal(base, "TGG") then "W" else if String.equal(base, "TGC") orelse String.equal(base, "TGT") then "C" else if String.equal(base, "TAC")orelse String.equal(base, "TAT")  then "Y" else if 
String.equal(base, "TTC") orelse String.equal(base, "TTT") then "F" else "STOP"
               
amino("CAC")               
               
        